"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = markLocalChangesAsSynced;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _rambdax = require("rambdax");

var _fp = require("../../utils/fp");

var _common = require("../../utils/common");

var _helpers = require("./helpers");

var unchangedRecordsForRaws = function (raws, recordCache) {
  return (0, _rambdax.reduce)(function (records, raw) {
    var record = recordCache.find(function (model) {
      return model.id === raw.id;
    });

    if (!record) {
      (0, _common.logError)("[Sync] Looking for record ".concat(raw.id, " to mark it as synced, but I can't find it. Will ignore it (it should get synced next time). This is probably a Watermelon bug \u2014 please file an issue!"));
      return records;
    } // only include if it didn't change since fetch
    // TODO: get rid of `equals`


    return (0, _rambdax.equals)(record._raw, raw) ? records.concat(record) : records;
  }, [], raws);
};

var recordsToMarkAsSynced = function ({
  changes: changes,
  affectedRecords: affectedRecords
}) {
  return (0, _rambdax.pipe)(_rambdax.values, (0, _rambdax.map)(function ({
    created: created,
    updated: updated
  }) {
    return unchangedRecordsForRaws([].concat((0, _toConsumableArray2.default)(created), (0, _toConsumableArray2.default)(updated)), affectedRecords);
  }), _fp.unnest)(changes);
};

var destroyDeletedRecords = function (db, {
  changes: changes
}) {
  return (0, _rambdax.promiseAllObject)((0, _rambdax.map)(function ({
    deleted: deleted
  }, tableName) {
    return db.adapter.destroyDeletedRecords(tableName, deleted);
  }, changes));
};

function markLocalChangesAsSynced(db, syncedLocalChanges) {
  (0, _helpers.ensureActionsEnabled)(db);
  return db.action(function () {
    return new Promise(function ($return, $error) {
      return Promise.resolve(Promise.all([db.batch.apply(db, (0, _toConsumableArray2.default)((0, _rambdax.map)(_helpers.prepareMarkAsSynced, recordsToMarkAsSynced(syncedLocalChanges)))), destroyDeletedRecords(db, syncedLocalChanges)])).then(function () {
        try {
          return $return();
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }, $error);
    });
  }, 'sync-markLocalChangesAsSynced');
}